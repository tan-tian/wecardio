<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:cache="http://www.springframework.org/schema/cache"
        xmlns:task="http://www.springframework.org/schema/task"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/cache 
	http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-4.1.xsd"
        default-lazy-init="true">

    <context:property-placeholder location="classpath*:/system.properties" ignore-resource-not-found="true"
                                  ignore-unresolvable="true"/>


    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.hiteam.common,com.borsam">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 资源文件加载 -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:config.properties"/>
    </bean>

    <!-- 使用Druid连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${connection_pools.initial_pool_size}"/>
        <property name="minIdle" value="${connection_pools.min_pool_size}"/>
        <property name="maxActive" value="${connection_pools.max_pool_size}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${connection_pools.max_wait_time}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${connection_pools.checkout_timeout}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${connection_pools.mix_idle_time}"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <!-- wall 防SQL注入 -->
        <!-- 		<property name="filters" value="${druid.filters}" /> -->

        <property name="proxyFilters">
            <list>
                <ref bean="config-filter" />
                <ref bean="wall-filter"/>
                <ref bean="stat-filter"/>
                <ref bean="log4j-filter"/>
            </list>
        </property>
    </bean>

    <bean id="config-filter" class="com.alibaba.druid.filter.config.ConfigFilter" />

    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
        <!-- 指定配置装载的目录  -->
        <property name="dir" value="META-INF/druid/wall/mysql"/>
        <property name="selectWhereAlwayTrueCheck" value="false"></property>
        <property name="conditionAndAlwayTrueAllow" value="true"></property>
    </bean>

    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql"/>
        <property name="config" ref="wall-filter-config"></property>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 记录慢SQL -->
        <property name="slowSqlMillis" value="${druid.slowSqlMillis}"/>
        <property name="logSlowSql" value="${druid.logSlowSql}"/>
    </bean>

    <bean id="log4j-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <!-- 打印可执行SQL -->
        <property name="statementExecutableSqlLogEnable" value="${druid.statementExecutableSqlLogEnable}"/>
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceXmlLocation" value="classpath*:/persistence.xml" />
        <!--<property name="persistenceUnitName" value="persistenceUnit"/>-->
        <!-- 指定实现厂商专用特性 -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="false"/>
                <!-- 是否自动生成DDL -->
                <property name="generateDdl" value="false"/>
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.ejb.naming_strategy">com.borsam.repository.hibernate.cfg.ExtImprovedNamingStrategy</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.connection.isolation">3</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.FSDirectoryProvider
                </prop>
                <prop key="hibernate.search.default.indexBase">${java.io.tmpdir}/${system.project_name}/index</prop>
            </props>
        </property>
        <property name="packagesToScan" value="com.**.repository.entity"/>
    </bean>

    <!-- 定义aspectj -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--使用注解进行事务控制，优先级高于aop-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <cache:annotation-driven cache-manager="cacheManager"/>

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="java.lang.System"/>
        <property name="targetMethod" value="setProperty"/>
        <property name="arguments">
            <list>
                <value>system.project_name</value>
                <value>${system.project_name}</value>
            </list>
        </property>
    </bean>

    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:/ehcache.xml"/>
        <property name="shared" value="true"/>
    </bean>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehCacheManager"/>
    </bean>

    <!-- ViewResolver -->
    <bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPaths" value="${template.loader_path}" />
        <property name="freemarkerSettings">
            <props>
                <prop key="defaultEncoding">${template.encoding}</prop>
                <prop key="url_escaping_charset">${url_escaping_charset}</prop>
                <prop key="locale">${locale}</prop>
                <prop key="template_update_delay">${template.update_delay}</prop>
                <prop key="tag_syntax">auto_detect</prop>
                <prop key="whitespace_stripping">true</prop>
                <prop key="classic_compatible">true</prop>
                <prop key="number_format">${template.number_format}</prop>
                <prop key="boolean_format">${template.boolean_format}</prop>
                <prop key="datetime_format">${template.datetime_format}</prop>
                <prop key="date_format">${template.date_format}</prop>
                <prop key="time_format">${template.time_format}</prop>
                <prop key="object_wrapper">freemarker.ext.beans.BeansWrapper</prop>
            </props>
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="systemName" value="${system.name}" />
                <entry key="systemVersion" value="${system.version}" />
                <entry key="systemDescription" value="${system.description}" />
                <entry key="systemShowPowered" value="${system.show_powered}" />
                <entry key="path" value="#{servletContext.contextPath}" />
                <entry key="locale" value="${locale}" />
                <entry key="message" value-ref="messageMethod" />
                <entry key="config" value-ref="configMethod" />
                <!--<entry key="config" value="#{T(com.hiteam.common.util.ConfigUtils).config}" />-->
            </map>
        </property>
    </bean>

    <!-- 资源文件 -->
    <!-- bean的名称必须定义为messageSource  -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="cacheSeconds" value="${message.cache_seconds}"/>
        <property name="useCodeAsDefaultMessage" value="true"/>
        <property name="basenames">
            <array>
                <value>classpath:/language/common/message</value>
                <value>classpath:/language/service/message</value>
                <value>classpath:/language/admin/message</value>
                <value>classpath:/language/doctor/message</value>
                <value>classpath:/language/org/message</value>
                <value>classpath:/language/patient/message</value>
                <value>classpath:/language/forum/message</value>
                <value>classpath:/language/home/message</value>
                <value>classpath:/language/message/message</value>
                <value>classpath:org/hibernate/validator/ValidationMessages</value>
            </array>
        </property>
    </bean>

    <!-- 国际化配置 -->
    <!-- org.springframework.web.servlet.i18n.CookieLocaleResolver -->
    <!-- org.springframework.web.servlet.i18n.SessionLocaleResolver -->
    <!-- org.springframework.web.servlet.i18n.FixedLocaleResolver -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieName" value="language"/>
        <property name="cookieMaxAge" value="94608000"/>
        <property name="defaultLocale" value="${locale}"/>
    </bean>

    <!-- 验证码生成器 -->
    <bean id="fastHashMapCaptchaStore" class="com.octo.captcha.service.captchastore.FastHashMapCaptchaStore"/>
    <bean id="captchaEngineEx" class=" com.hiteam.common.service.CaptchaEngine"/>
    <bean id="imageCaptchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
        <constructor-arg type="com.octo.captcha.service.captchastore.CaptchaStore" index="0">
            <ref bean="fastHashMapCaptchaStore"/>
        </constructor-arg>
        <constructor-arg type="com.octo.captcha.engine.CaptchaEngine" index="1">
            <ref bean="captchaEngineEx"/>
        </constructor-arg>
        <!--默认生成的图片180秒过期 , 可另行设置-->
        <constructor-arg index="2">
            <value>180</value>
        </constructor-arg>
        <constructor-arg index="3">
            <value>100000</value>
        </constructor-arg>
        <constructor-arg index="4">
            <value>75000</value>
        </constructor-arg>
    </bean>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${task.core_pool_size}"/>
        <property name="maxPoolSize" value="${task.max_pool_size}"/>
        <property name="queueCapacity" value="${task.queue_capacity}"/>
        <property name="keepAliveSeconds" value="${task.keep_alive_seconds}"/>
    </bean>

    <bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
                <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
                <!--
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                -->
            </props>
        </property>
    </bean>

    <task:annotation-driven executor="taskExecutor"/>

</beans>